/*
Fiber Example API

This is a sample swagger for Fiber

API version: 1.0
Contact: fiber@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UsersUpdateUserSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersUpdateUserSchema{}

// UsersUpdateUserSchema struct for UsersUpdateUserSchema
type UsersUpdateUserSchema struct {
	Avatar *string `json:"avatar,omitempty"`
	Bio *string `json:"bio,omitempty"`
	Email *string `json:"email,omitempty"`
	SubDragonId *int32 `json:"subDragonId,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewUsersUpdateUserSchema instantiates a new UsersUpdateUserSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersUpdateUserSchema() *UsersUpdateUserSchema {
	this := UsersUpdateUserSchema{}
	return &this
}

// NewUsersUpdateUserSchemaWithDefaults instantiates a new UsersUpdateUserSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersUpdateUserSchemaWithDefaults() *UsersUpdateUserSchema {
	this := UsersUpdateUserSchema{}
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *UsersUpdateUserSchema) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdateUserSchema) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *UsersUpdateUserSchema) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *UsersUpdateUserSchema) SetAvatar(v string) {
	o.Avatar = &v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *UsersUpdateUserSchema) GetBio() string {
	if o == nil || IsNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdateUserSchema) GetBioOk() (*string, bool) {
	if o == nil || IsNil(o.Bio) {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *UsersUpdateUserSchema) HasBio() bool {
	if o != nil && !IsNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *UsersUpdateUserSchema) SetBio(v string) {
	o.Bio = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UsersUpdateUserSchema) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdateUserSchema) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UsersUpdateUserSchema) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UsersUpdateUserSchema) SetEmail(v string) {
	o.Email = &v
}

// GetSubDragonId returns the SubDragonId field value if set, zero value otherwise.
func (o *UsersUpdateUserSchema) GetSubDragonId() int32 {
	if o == nil || IsNil(o.SubDragonId) {
		var ret int32
		return ret
	}
	return *o.SubDragonId
}

// GetSubDragonIdOk returns a tuple with the SubDragonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdateUserSchema) GetSubDragonIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubDragonId) {
		return nil, false
	}
	return o.SubDragonId, true
}

// HasSubDragonId returns a boolean if a field has been set.
func (o *UsersUpdateUserSchema) HasSubDragonId() bool {
	if o != nil && !IsNil(o.SubDragonId) {
		return true
	}

	return false
}

// SetSubDragonId gets a reference to the given int32 and assigns it to the SubDragonId field.
func (o *UsersUpdateUserSchema) SetSubDragonId(v int32) {
	o.SubDragonId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UsersUpdateUserSchema) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdateUserSchema) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UsersUpdateUserSchema) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UsersUpdateUserSchema) SetUsername(v string) {
	o.Username = &v
}

func (o UsersUpdateUserSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersUpdateUserSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.SubDragonId) {
		toSerialize["subDragonId"] = o.SubDragonId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableUsersUpdateUserSchema struct {
	value *UsersUpdateUserSchema
	isSet bool
}

func (v NullableUsersUpdateUserSchema) Get() *UsersUpdateUserSchema {
	return v.value
}

func (v *NullableUsersUpdateUserSchema) Set(val *UsersUpdateUserSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersUpdateUserSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersUpdateUserSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersUpdateUserSchema(val *UsersUpdateUserSchema) *NullableUsersUpdateUserSchema {
	return &NullableUsersUpdateUserSchema{value: val, isSet: true}
}

func (v NullableUsersUpdateUserSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersUpdateUserSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


