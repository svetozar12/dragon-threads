/*
Fiber Example API

This is a sample swagger for Fiber

API version: 1.0
Contact: fiber@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the EntitiesUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntitiesUser{}

// EntitiesUser struct for EntitiesUser
type EntitiesUser struct {
	Active *bool `json:"active,omitempty"`
	Avatar *string `json:"avatar,omitempty"`
	Bio *string `json:"bio,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	DeletedAt *GormDeletedAt `json:"deletedAt,omitempty"`
	Email *string `json:"email,omitempty"`
	Id int32 `json:"id"`
	SubDragonId *int32 `json:"subDragonId,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewEntitiesUser instantiates a new EntitiesUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitiesUser(id int32) *EntitiesUser {
	this := EntitiesUser{}
	this.Id = id
	return &this
}

// NewEntitiesUserWithDefaults instantiates a new EntitiesUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitiesUserWithDefaults() *EntitiesUser {
	this := EntitiesUser{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EntitiesUser) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EntitiesUser) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EntitiesUser) SetActive(v bool) {
	o.Active = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *EntitiesUser) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *EntitiesUser) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *EntitiesUser) SetAvatar(v string) {
	o.Avatar = &v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *EntitiesUser) GetBio() string {
	if o == nil || IsNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetBioOk() (*string, bool) {
	if o == nil || IsNil(o.Bio) {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *EntitiesUser) HasBio() bool {
	if o != nil && !IsNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *EntitiesUser) SetBio(v string) {
	o.Bio = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EntitiesUser) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EntitiesUser) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *EntitiesUser) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *EntitiesUser) GetDeletedAt() GormDeletedAt {
	if o == nil || IsNil(o.DeletedAt) {
		var ret GormDeletedAt
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetDeletedAtOk() (*GormDeletedAt, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *EntitiesUser) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given GormDeletedAt and assigns it to the DeletedAt field.
func (o *EntitiesUser) SetDeletedAt(v GormDeletedAt) {
	o.DeletedAt = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EntitiesUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EntitiesUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EntitiesUser) SetEmail(v string) {
	o.Email = &v
}

// GetId returns the Id field value
func (o *EntitiesUser) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EntitiesUser) SetId(v int32) {
	o.Id = v
}

// GetSubDragonId returns the SubDragonId field value if set, zero value otherwise.
func (o *EntitiesUser) GetSubDragonId() int32 {
	if o == nil || IsNil(o.SubDragonId) {
		var ret int32
		return ret
	}
	return *o.SubDragonId
}

// GetSubDragonIdOk returns a tuple with the SubDragonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetSubDragonIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubDragonId) {
		return nil, false
	}
	return o.SubDragonId, true
}

// HasSubDragonId returns a boolean if a field has been set.
func (o *EntitiesUser) HasSubDragonId() bool {
	if o != nil && !IsNil(o.SubDragonId) {
		return true
	}

	return false
}

// SetSubDragonId gets a reference to the given int32 and assigns it to the SubDragonId field.
func (o *EntitiesUser) SetSubDragonId(v int32) {
	o.SubDragonId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *EntitiesUser) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *EntitiesUser) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *EntitiesUser) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *EntitiesUser) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesUser) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *EntitiesUser) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *EntitiesUser) SetUsername(v string) {
	o.Username = &v
}

func (o EntitiesUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntitiesUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.SubDragonId) {
		toSerialize["subDragonId"] = o.SubDragonId
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableEntitiesUser struct {
	value *EntitiesUser
	isSet bool
}

func (v NullableEntitiesUser) Get() *EntitiesUser {
	return v.value
}

func (v *NullableEntitiesUser) Set(val *EntitiesUser) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesUser) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesUser(val *EntitiesUser) *NullableEntitiesUser {
	return &NullableEntitiesUser{value: val, isSet: true}
}

func (v NullableEntitiesUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


