/*
Fiber Example API

This is a sample swagger for Fiber

API version: 1.0
Contact: fiber@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UsersUserListSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersUserListSchema{}

// UsersUserListSchema struct for UsersUserListSchema
type UsersUserListSchema struct {
	Data []EntitiesUser `json:"data,omitempty"`
	Pagination *CommonCommonPaginationSchema `json:"pagination,omitempty"`
}

// NewUsersUserListSchema instantiates a new UsersUserListSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersUserListSchema() *UsersUserListSchema {
	this := UsersUserListSchema{}
	return &this
}

// NewUsersUserListSchemaWithDefaults instantiates a new UsersUserListSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersUserListSchemaWithDefaults() *UsersUserListSchema {
	this := UsersUserListSchema{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *UsersUserListSchema) GetData() []EntitiesUser {
	if o == nil || IsNil(o.Data) {
		var ret []EntitiesUser
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUserListSchema) GetDataOk() ([]EntitiesUser, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UsersUserListSchema) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []EntitiesUser and assigns it to the Data field.
func (o *UsersUserListSchema) SetData(v []EntitiesUser) {
	o.Data = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *UsersUserListSchema) GetPagination() CommonCommonPaginationSchema {
	if o == nil || IsNil(o.Pagination) {
		var ret CommonCommonPaginationSchema
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUserListSchema) GetPaginationOk() (*CommonCommonPaginationSchema, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *UsersUserListSchema) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given CommonCommonPaginationSchema and assigns it to the Pagination field.
func (o *UsersUserListSchema) SetPagination(v CommonCommonPaginationSchema) {
	o.Pagination = &v
}

func (o UsersUserListSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersUserListSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableUsersUserListSchema struct {
	value *UsersUserListSchema
	isSet bool
}

func (v NullableUsersUserListSchema) Get() *UsersUserListSchema {
	return v.value
}

func (v *NullableUsersUserListSchema) Set(val *UsersUserListSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersUserListSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersUserListSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersUserListSchema(val *UsersUserListSchema) *NullableUsersUserListSchema {
	return &NullableUsersUserListSchema{value: val, isSet: true}
}

func (v NullableUsersUserListSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersUserListSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


